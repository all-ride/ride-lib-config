<?php

namespace ride\library\config\io;

use ride\library\system\file\File;

/**
 * Cache decorator for another ConfigIO. This IO will get the configuration
 * from the wrapped IO and generate a PHP script to include. When the generated
 * PHP script exists, this will be used to define the config. It should be
 * faster since only 1 include is done which contains plain PHP variable
 * initialization;
 */
class CachedConfigIO implements ConfigIO {

    /**
     * ConfigIO which is cached by this ConfigIO
     * @var \ride\library\config\io\ConfigIO
     */
    private $io;

    /**
     * File to write the cache to
     * @var \ride\library\system\file\File
     */
    private $file;

    /**
     * Loaded configuration
     * @var array
     */
    private $config;

    /**
     * Constructs a new cached ConfigIO
     * @param ConfigIO $io the ConfigIO which needs a cache
     * @param \ride\library\system\file\File $file File for the cache
     * @return null
     */
    public function __construct(ConfigIO $io, File $file) {
        $this->io = $io;
        $this->setFile($file);
    }

    /**
     * Sets the file for the generated code
     * @param \ride\library\system\file\File $file The file to generate the code in
     * @return null
     */
    public function setFile(File $file) {
        $this->file = $file;
    }

    /**
     * Gets the file for the generated code
     * @return \ride\library\system\file\File The file to generate the code in
     */
    public function getFile() {
        return $this->file;
    }

    /**
     * Gets the names of all the sections in the configuration
     * @return array Array with the names of all sections in the configuration
     */
    public function getAllSections() {
        return array_keys($this->getAll());
    }

    /**
     * Gets the complete configuration
     * @return array Hierarchic array with each configuration token as a key
     */
    public function getAll() {
        if ($this->config !== null) {
            return $this->config;
        }

        if ($this->file->exists()) {
            // the generated script exists, include it
            require($this->file);

            if (isset($config)) {
                // the script defined a container, return it
                $this->config = $config;

                return $this->config;
            }
        }

        // we have no configuration, use the wrapped IO to get one
        $this->config = $this->io->getAll();

        // generate the PHP code for the obtained configuration
        $php = $this->generatePhp($this->config);

        // make sure the parent directory of the script exists
        $parent = $this->file->getParent();
        $parent->create();

        // write the PHP code to file
        $this->file->write($php);

        // return the configuration
        return $this->config;
    }

    /**
     * Gets a section from the configuration
     * @param string $section
     * @return array Hierarchic array with each configuration token as a key
     */
    public function get($section) {
        $this->getAll();

        if (isset($this->config[$section])) {
            return $this->config[$section];
        }

        return array();
    }

    /**
     * Sets a configuration value
     * @param string $key key of the configuration value
     * @param mixed $value
     * @return null
     */
    public function set($key, $value) {
        if ($this->file->exists()) {
            $this->file->delete();
        }

        $this->io->set($key, $value);

        $this->config = null;
    }

    /**
     * Generates a PHP source file for the provided configuration
     * @param array $config Hierarchic array with each configuration token as a key
     * @return string
     */
    protected function generatePhp(array $config) {
        $output = "<?php\n\n";
        $output .= "/*\n";
        $output .= " * This file is generated by ride\\library\\config\\io\\CachedConfigIO.\n";
        $output .= " */\n";
        $output .= "\n";
        $output .= '$config' . ' = ' . var_export($config, true) . ';';

        return $output;
    }

}